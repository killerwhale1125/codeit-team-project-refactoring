name: Dev Deploy To EC2

on:
  push:
    branches:
      - dev

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Github Repository check out # Github Repository 에서 코드를 가져온다
        uses: actions/checkout@v4

      - name: JDK 17 install  # GitActions 서버에 JDK 를 설치한다.
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      - name: Create application.yml  # GitActions 서버에서 테스트하기 위하여 등록한 yml 파일을 가져온다.
        run: echo "${{ secrets.APPLICATION_PROPERTIES_TEST }}" > ./src/main/resources/application.yml

      - name: Test & Build  # Test 와 Build 를 수행한다.
        run: |
          chmod +x gradlew
          ./gradlew clean build

      - name: AWS Resource에 접근 가능하게 AWS credentials 설정
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ap-northeast-2
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_TEST }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_TEST }}

      - name: ECR 로그인
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Dockerfile 기반으로 이미지 생성
        run: docker build -t codeit-refactor-server .

      - name: Docker 이미지에 Tag 붙이기
        run: docker tag codeit-refactor-server ${{ steps.login-ecr.outputs.registry }}/codeit-refactor-server:latest

        # {{steps.{id}. 의 결값의 registry(주소)}}
      - name: Push Docker image to ECR
        run: docker push ${{ steps.login-ecr.outputs.registry }}/codeit-refactor-server:latest

      - name: SSH로 EC2에 접속하기
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          script_stop: true
          script: |
            docker stop codeit-refactor-server || true
            docker rm codeit-refactor-server || true
            docker pull ${{ steps.login-ecr.outputs.registry }}/codeit-refactor-server:latest
            docker run -d --name codeit-refactor-server:latest -p 8080:8080 ${{ steps.login-ecr.outputs.registry }}/codeit-refactor-server:latest