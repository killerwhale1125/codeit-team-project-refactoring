package com.gathering.mock.fake.repository;

import com.gathering.gathering.model.domain.GatheringDomain;
import com.gathering.gatheringuser.model.domain.GatheringUserDomain;
import com.gathering.gatheringuser.repository.GatheringUserRepository;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.concurrent.atomic.AtomicLong;

public class FakeGatheringUserRepository implements GatheringUserRepository {

    private final AtomicLong autoGeneratedId = new AtomicLong(0);
    private List<GatheringUserDomain> data = new ArrayList<>();

    @Override
    public GatheringUserDomain save(GatheringUserDomain gatheringUser) {
        if(Objects.isNull(gatheringUser.getId())) {
            GatheringDomain gathering = gatheringUser.getGathering();
            GatheringUserDomain createGatheringUser = GatheringUserDomain.builder()
                    .id(autoGeneratedId.incrementAndGet())
                    .gatheringUserStatus(gatheringUser.getGatheringUserStatus())
                    .user(gatheringUser.getUser())
                    .gathering(gathering)
                    .build();
            gathering.getGatheringUsers().add(createGatheringUser); // 양방향 관계 설정
            data.add(createGatheringUser);
            return createGatheringUser;
        } else {
            data.removeIf(item -> Objects.equals(item.getId(), gatheringUser.getId()));
            data.add(gatheringUser);
            return gatheringUser;
        }
    }

    @Override
    public void deleteById(Long gatheringUserId) {

    }

    @Override
    public void join(GatheringUserDomain gatheringUserDomain) {

    }
}
