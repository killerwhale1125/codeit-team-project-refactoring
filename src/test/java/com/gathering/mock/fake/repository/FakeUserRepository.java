package com.gathering.mock.fake.repository;

import com.gathering.common.base.exception.BaseException;
import com.gathering.user.domain.SingUpType;
import com.gathering.user.domain.UserDomain;
import com.gathering.user.domain.UserResponse;
import com.gathering.user.domain.UserSignUp;
import com.gathering.user.service.port.UserRepository;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.Set;
import java.util.concurrent.atomic.AtomicLong;

import static com.gathering.common.base.response.BaseResponseStatus.NOT_EXISTED_USER;

public class FakeUserRepository implements UserRepository {

    private final AtomicLong autoGeneratedId = new AtomicLong(0);
    private final List<UserDomain> data = new ArrayList<>();

    @Override
    public UserDomain selectUser(String userName) {
        return null;
    }

    @Override
    public UserDomain findByUsername(String username) {
        return data.stream().filter(item -> Objects.equals(item.getUserName(), username))
                .findFirst()
                .orElseThrow(() -> new BaseException(NOT_EXISTED_USER));
    }

    @Override
    public boolean checkType(String param, SingUpType type) {
        return false;
    }

    @Override
    public UserDomain save(UserDomain userDomain) {
        if (Objects.isNull(userDomain.getId())) {
            final UserDomain createUser = UserDomain.builder()
                    .id(autoGeneratedId.incrementAndGet())
                    .id(1L)
                    .userName(userDomain.getUserName())
                    .password(userDomain.getPassword())
                    .email(userDomain.getEmail())
                    .profile(userDomain.getProfile())
                    .roles(userDomain.getRoles())
                    .build();
            data.add(createUser);
            return createUser;
        } else {
            data.removeIf(item -> Objects.equals(item.getId(), userDomain.getId()));
            data.add(userDomain);
            return userDomain;
        }
    }

    @Override
    public UserDomain selectUserByEmail(String email) {
        return null;
    }

    @Override
    public Set<Long> findWishGatheringIdsByUserName(String username) {
        return data.stream()
                .filter(item -> Objects.equals(item.getUserName(), username))
                .findFirst()
                .get()
                .getWishGatheringIds();
    }

    @Override
    public UserDomain findByUsernameWithImage(String username) {
        return null;
    }

}
