package com.gathering.mock.fake.repository;

import com.gathering.book.controller.response.BookSearchResponse;
import com.gathering.book.domain.BookDomain;
import com.gathering.book.service.port.BookRepository;
import com.gathering.common.base.exception.BaseException;
import com.gathering.common.base.response.BaseResponseStatus;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.concurrent.atomic.AtomicLong;

public class FakeBookRepository implements BookRepository {

    private final AtomicLong autoGeneratedId = new AtomicLong(0);
    private final List<BookDomain> data = new ArrayList<>();

    @Override
    public boolean existsByTitle(String title) {
        return false;
    }

    @Override
    public BookDomain save(BookDomain book) {
        return null;
    }

    @Override
    public BookDomain findById(Long bookId) {
        return data.stream().filter(item -> Objects.equals(item.getId(), bookId))
                .findFirst()
                .orElseThrow(() -> new BaseException(BaseResponseStatus.NOT_EXISTED_BOOK));
    }

    @Override
    public List<BookSearchResponse> findPopularBooks(int page, int size) {
        return null;
    }

    @Override
    public List<BookDomain> searchBooksBySearchWord(String title) {
        return null;
    }

    @Override
    public void updateSelectedCount(BookDomain book) {

    }

    public BookDomain saveBook(BookDomain bookDomain) {
        if (Objects.isNull(bookDomain.getId())) {
            final BookDomain createBook = BookDomain.builder()
                    .id(autoGeneratedId.incrementAndGet())
                    .title(bookDomain.getTitle())
                    .image(bookDomain.getImage())
                    .publisher(bookDomain.getPublisher())
                    .author(bookDomain.getAuthor())
                    .publishDate(bookDomain.getPublishDate())
                    .selectedCount(bookDomain.getSelectedCount())
                    .star(bookDomain.getStar())
                    .introduce(bookDomain.getIntroduce())
                    .totalPage(bookDomain.getTotalPage())
                    .build();
            data.add(createBook);
            return createBook;
        } else {
            data.removeIf(item -> Objects.equals(item.getId(), bookDomain.getId()));
            data.add(bookDomain);
            return bookDomain;
        }
    }
}
