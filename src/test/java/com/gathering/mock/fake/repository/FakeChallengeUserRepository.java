package com.gathering.mock.fake.repository;

import com.gathering.challenge.model.domain.ChallengeDomain;
import com.gathering.challengeuser.model.domain.ChallengeUserDomain;
import com.gathering.challengeuser.repository.ChallengeUserRepository;
import com.gathering.common.base.exception.BaseException;
import com.gathering.common.base.response.BaseResponseStatus;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.concurrent.atomic.AtomicLong;

public class FakeChallengeUserRepository implements ChallengeUserRepository {

    private final AtomicLong autoGeneratedId = new AtomicLong(0);
    private List<ChallengeUserDomain> data = new ArrayList<>();

    @Override
    public ChallengeUserDomain save(ChallengeUserDomain challengeUser) {
        if(Objects.isNull(challengeUser.getId())) {
            ChallengeDomain challenge = challengeUser.getChallenge();
            ChallengeUserDomain createChallengeUser = ChallengeUserDomain.builder()
                    .id(autoGeneratedId.incrementAndGet())
                    .attendanceDate(null)
                    .attendanceRate(challengeUser.getAttendanceRate())
                    .readingRate(challengeUser.getReadingRate())
                    .user(challengeUser.getUser())
                    .challenge(challenge)
                    .build();
            challenge.getChallengeUsers().add(createChallengeUser); // 양방향 관계 설정
            data.add(createChallengeUser);
            return createChallengeUser;
        } else {
            data.removeIf(item -> Objects.equals(item.getId(), challengeUser.getId()));
            data.add(challengeUser);
            return challengeUser;
        }
    }

    @Override
    public void deleteById(Long challengeUserId) {
        data.removeIf(item -> Objects.equals(item.getId(), challengeUserId));
    }

    @Override
    public void join(ChallengeUserDomain challengeUserDomain) {

    }

    @Override
    public ChallengeUserDomain getByChallengeIdAndUserId(Long challengeId, Long userId) {
        return data.stream().filter(item -> Objects.equals(item.getChallenge().getId(), challengeId)
                && Objects.equals(item.getUser().getId(), userId))
                .findFirst()
                .orElseThrow(() -> new BaseException(BaseResponseStatus.NON_EXISTED_CHALLENGE_USER));
    }

    @Override
    public void readBookCompleted(ChallengeUserDomain challengeUser) {
        data.removeIf(item -> Objects.equals(item.getId(), challengeUser));
        data.add(challengeUser);
    }
}
